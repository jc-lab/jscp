// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: jscp-protocol.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "kr.jclab.jscp.payload";

/** AEAD Cipher Algorithm */
export enum CipherAlgorithm {
  CipherUnknown = 0,
  CipherAES = 1,
  UNRECOGNIZED = -1,
}

export function cipherAlgorithmFromJSON(object: any): CipherAlgorithm {
  switch (object) {
    case 0:
    case "CipherUnknown":
      return CipherAlgorithm.CipherUnknown;
    case 1:
    case "CipherAES":
      return CipherAlgorithm.CipherAES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CipherAlgorithm.UNRECOGNIZED;
  }
}

export function cipherAlgorithmToJSON(object: CipherAlgorithm): string {
  switch (object) {
    case CipherAlgorithm.CipherUnknown:
      return "CipherUnknown";
    case CipherAlgorithm.CipherAES:
      return "CipherAES";
    case CipherAlgorithm.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum HashAlgorithm {
  HashUnknown = 0,
  HashSha256 = 1,
  UNRECOGNIZED = -1,
}

export function hashAlgorithmFromJSON(object: any): HashAlgorithm {
  switch (object) {
    case 0:
    case "HashUnknown":
      return HashAlgorithm.HashUnknown;
    case 1:
    case "HashSha256":
      return HashAlgorithm.HashSha256;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HashAlgorithm.UNRECOGNIZED;
  }
}

export function hashAlgorithmToJSON(object: HashAlgorithm): string {
  switch (object) {
    case HashAlgorithm.HashUnknown:
      return "HashUnknown";
    case HashAlgorithm.HashSha256:
      return "HashSha256";
    case HashAlgorithm.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SignatureAlgorithm {
  SignatureUnknown = 0,
  SignatureEd25519 = 1,
  UNRECOGNIZED = -1,
}

export function signatureAlgorithmFromJSON(object: any): SignatureAlgorithm {
  switch (object) {
    case 0:
    case "SignatureUnknown":
      return SignatureAlgorithm.SignatureUnknown;
    case 1:
    case "SignatureEd25519":
      return SignatureAlgorithm.SignatureEd25519;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SignatureAlgorithm.UNRECOGNIZED;
  }
}

export function signatureAlgorithmToJSON(object: SignatureAlgorithm): string {
  switch (object) {
    case SignatureAlgorithm.SignatureUnknown:
      return "SignatureUnknown";
    case SignatureAlgorithm.SignatureEd25519:
      return "SignatureEd25519";
    case SignatureAlgorithm.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum DHAlgorithm {
  DHUnknown = 0,
  DHX25519 = 1,
  UNRECOGNIZED = -1,
}

export function dHAlgorithmFromJSON(object: any): DHAlgorithm {
  switch (object) {
    case 0:
    case "DHUnknown":
      return DHAlgorithm.DHUnknown;
    case 1:
    case "DHX25519":
      return DHAlgorithm.DHX25519;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DHAlgorithm.UNRECOGNIZED;
  }
}

export function dHAlgorithmToJSON(object: DHAlgorithm): string {
  switch (object) {
    case DHAlgorithm.DHUnknown:
      return "DHUnknown";
    case DHAlgorithm.DHX25519:
      return "DHX25519";
    case DHAlgorithm.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SignaturePublicKey {
  algorithm: SignatureAlgorithm;
  data: Uint8Array;
}

export interface SignaturePrivateKey {
  algorithm: SignatureAlgorithm;
  data: Uint8Array;
}

function createBaseSignaturePublicKey(): SignaturePublicKey {
  return { algorithm: 0, data: new Uint8Array(0) };
}

export const SignaturePublicKey: MessageFns<SignaturePublicKey> = {
  encode(message: SignaturePublicKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.algorithm !== 0) {
      writer.uint32(8).int32(message.algorithm);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignaturePublicKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignaturePublicKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.algorithm = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignaturePublicKey {
    return {
      algorithm: isSet(object.algorithm) ? signatureAlgorithmFromJSON(object.algorithm) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: SignaturePublicKey): unknown {
    const obj: any = {};
    if (message.algorithm !== 0) {
      obj.algorithm = signatureAlgorithmToJSON(message.algorithm);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignaturePublicKey>, I>>(base?: I): SignaturePublicKey {
    return SignaturePublicKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignaturePublicKey>, I>>(object: I): SignaturePublicKey {
    const message = createBaseSignaturePublicKey();
    message.algorithm = object.algorithm ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSignaturePrivateKey(): SignaturePrivateKey {
  return { algorithm: 0, data: new Uint8Array(0) };
}

export const SignaturePrivateKey: MessageFns<SignaturePrivateKey> = {
  encode(message: SignaturePrivateKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.algorithm !== 0) {
      writer.uint32(8).int32(message.algorithm);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignaturePrivateKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignaturePrivateKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.algorithm = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignaturePrivateKey {
    return {
      algorithm: isSet(object.algorithm) ? signatureAlgorithmFromJSON(object.algorithm) : 0,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: SignaturePrivateKey): unknown {
    const obj: any = {};
    if (message.algorithm !== 0) {
      obj.algorithm = signatureAlgorithmToJSON(message.algorithm);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignaturePrivateKey>, I>>(base?: I): SignaturePrivateKey {
    return SignaturePrivateKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignaturePrivateKey>, I>>(object: I): SignaturePrivateKey {
    const message = createBaseSignaturePrivateKey();
    message.algorithm = object.algorithm ?? 0;
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *HandshakeResult) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Error":
			z.Error, err = dc.ReadBytes(z.Error)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HandshakeResult) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Error"
	err = en.Append(0x81, 0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Error)
	if err != nil {
		err = msgp.WrapError(err, "Error")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HandshakeResult) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Error"
	o = append(o, 0x81, 0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
	o = msgp.AppendBytes(o, z.Error)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HandshakeResult) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Error":
			z.Error, bts, err = msgp.ReadBytesBytes(bts, z.Error)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HandshakeResult) Msgsize() (s int) {
	s = 1 + 6 + msgp.BytesPrefixSize + len(z.Error)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TransferBridge) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Send":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Send")
				return
			}
			if cap(z.Send) >= int(zb0002) {
				z.Send = (z.Send)[:zb0002]
			} else {
				z.Send = make([][]byte, zb0002)
			}
			for za0001 := range z.Send {
				z.Send[za0001], err = dc.ReadBytes(z.Send[za0001])
				if err != nil {
					err = msgp.WrapError(err, "Send", za0001)
					return
				}
				if z.Send[za0001] == nil {
					z.Send[za0001] = make([]byte, 0)
				}
			}
		case "Finish":
			z.Finish, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Finish")
				return
			}
		case "HandshakeResult":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "HandshakeResult")
					return
				}
				z.HandshakeResult = nil
			} else {
				if z.HandshakeResult == nil {
					z.HandshakeResult = new(HandshakeResult)
				}
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "HandshakeResult")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "HandshakeResult")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Error":
						z.HandshakeResult.Error, err = dc.ReadBytes(z.HandshakeResult.Error)
						if err != nil {
							err = msgp.WrapError(err, "HandshakeResult", "Error")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "HandshakeResult")
							return
						}
					}
				}
			}
		case "Data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "Error":
			z.Error, err = dc.ReadBytes(z.Error)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TransferBridge) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Send"
	err = en.Append(0x85, 0xa4, 0x53, 0x65, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Send)))
	if err != nil {
		err = msgp.WrapError(err, "Send")
		return
	}
	for za0001 := range z.Send {
		err = en.WriteBytes(z.Send[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Send", za0001)
			return
		}
	}
	// write "Finish"
	err = en.Append(0xa6, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Finish)
	if err != nil {
		err = msgp.WrapError(err, "Finish")
		return
	}
	// write "HandshakeResult"
	err = en.Append(0xaf, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74)
	if err != nil {
		return
	}
	if z.HandshakeResult == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "Error"
		err = en.Append(0x81, 0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.HandshakeResult.Error)
		if err != nil {
			err = msgp.WrapError(err, "HandshakeResult", "Error")
			return
		}
	}
	// write "Data"
	err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// write "Error"
	err = en.Append(0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Error)
	if err != nil {
		err = msgp.WrapError(err, "Error")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TransferBridge) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Send"
	o = append(o, 0x85, 0xa4, 0x53, 0x65, 0x6e, 0x64)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Send)))
	for za0001 := range z.Send {
		o = msgp.AppendBytes(o, z.Send[za0001])
	}
	// string "Finish"
	o = append(o, 0xa6, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68)
	o = msgp.AppendBool(o, z.Finish)
	// string "HandshakeResult"
	o = append(o, 0xaf, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74)
	if z.HandshakeResult == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "Error"
		o = append(o, 0x81, 0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
		o = msgp.AppendBytes(o, z.HandshakeResult.Error)
	}
	// string "Data"
	o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	// string "Error"
	o = append(o, 0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
	o = msgp.AppendBytes(o, z.Error)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransferBridge) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Send":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Send")
				return
			}
			if cap(z.Send) >= int(zb0002) {
				z.Send = (z.Send)[:zb0002]
			} else {
				z.Send = make([][]byte, zb0002)
			}
			for za0001 := range z.Send {
				z.Send[za0001], bts, err = msgp.ReadBytesBytes(bts, z.Send[za0001])
				if err != nil {
					err = msgp.WrapError(err, "Send", za0001)
					return
				}
				if z.Send[za0001] == nil {
					z.Send[za0001] = make([]byte, 0)
				}
			}
		case "Finish":
			z.Finish, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Finish")
				return
			}
		case "HandshakeResult":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.HandshakeResult = nil
			} else {
				if z.HandshakeResult == nil {
					z.HandshakeResult = new(HandshakeResult)
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "HandshakeResult")
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "HandshakeResult")
						return
					}
					switch msgp.UnsafeString(field) {
					case "Error":
						z.HandshakeResult.Error, bts, err = msgp.ReadBytesBytes(bts, z.HandshakeResult.Error)
						if err != nil {
							err = msgp.WrapError(err, "HandshakeResult", "Error")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "HandshakeResult")
							return
						}
					}
				}
			}
		case "Data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "Error":
			z.Error, bts, err = msgp.ReadBytesBytes(bts, z.Error)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TransferBridge) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Send {
		s += msgp.BytesPrefixSize + len(z.Send[za0001])
	}
	s += 7 + msgp.BoolSize + 16
	if z.HandshakeResult == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 6 + msgp.BytesPrefixSize + len(z.HandshakeResult.Error)
	}
	s += 5 + msgp.BytesPrefixSize + len(z.Data) + 6 + msgp.BytesPrefixSize + len(z.Error)
	return
}

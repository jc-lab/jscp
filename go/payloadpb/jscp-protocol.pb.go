// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v5.28.2
// source: jscp-protocol.proto

package payloadpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeyType int32

const (
	KeyType_KeyTypeUnknown          KeyType = 0
	KeyType_KeyTypeDHStart          KeyType = 1
	KeyType_KeyTypeDHX25519         KeyType = 2
	KeyType_KeyTypeDHEnd            KeyType = 100
	KeyType_KeyTypeSignatureStart   KeyType = 101
	KeyType_KeyTypeSignatureEd25519 KeyType = 102
	KeyType_KeyTypeSignatureEnd     KeyType = 200
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0:   "KeyTypeUnknown",
		1:   "KeyTypeDHStart",
		2:   "KeyTypeDHX25519",
		100: "KeyTypeDHEnd",
		101: "KeyTypeSignatureStart",
		102: "KeyTypeSignatureEd25519",
		200: "KeyTypeSignatureEnd",
	}
	KeyType_value = map[string]int32{
		"KeyTypeUnknown":          0,
		"KeyTypeDHStart":          1,
		"KeyTypeDHX25519":         2,
		"KeyTypeDHEnd":            100,
		"KeyTypeSignatureStart":   101,
		"KeyTypeSignatureEd25519": 102,
		"KeyTypeSignatureEnd":     200,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_jscp_protocol_proto_enumTypes[0].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_jscp_protocol_proto_enumTypes[0]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{0}
}

type CryptoAlgorithm int32

const (
	CryptoAlgorithm_CryptoAlgorithmUnknown CryptoAlgorithm = 0
	CryptoAlgorithm_CryptoAlgorithmAes     CryptoAlgorithm = 1
)

// Enum value maps for CryptoAlgorithm.
var (
	CryptoAlgorithm_name = map[int32]string{
		0: "CryptoAlgorithmUnknown",
		1: "CryptoAlgorithmAes",
	}
	CryptoAlgorithm_value = map[string]int32{
		"CryptoAlgorithmUnknown": 0,
		"CryptoAlgorithmAes":     1,
	}
)

func (x CryptoAlgorithm) Enum() *CryptoAlgorithm {
	p := new(CryptoAlgorithm)
	*p = x
	return p
}

func (x CryptoAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_jscp_protocol_proto_enumTypes[1].Descriptor()
}

func (CryptoAlgorithm) Type() protoreflect.EnumType {
	return &file_jscp_protocol_proto_enumTypes[1]
}

func (x CryptoAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoAlgorithm.Descriptor instead.
func (CryptoAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{1}
}

type AlertCode int32

const (
	AlertCode_AlertClose             AlertCode = 0
	AlertCode_AlertOther             AlertCode = 9
	AlertCode_AlertUnexpectedMessage AlertCode = 10
)

// Enum value maps for AlertCode.
var (
	AlertCode_name = map[int32]string{
		0:  "AlertClose",
		9:  "AlertOther",
		10: "AlertUnexpectedMessage",
	}
	AlertCode_value = map[string]int32{
		"AlertClose":             0,
		"AlertOther":             9,
		"AlertUnexpectedMessage": 10,
	}
)

func (x AlertCode) Enum() *AlertCode {
	p := new(AlertCode)
	*p = x
	return p
}

func (x AlertCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertCode) Descriptor() protoreflect.EnumDescriptor {
	return file_jscp_protocol_proto_enumTypes[2].Descriptor()
}

func (AlertCode) Type() protoreflect.EnumType {
	return &file_jscp_protocol_proto_enumTypes[2]
}

func (x AlertCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertCode.Descriptor instead.
func (AlertCode) EnumDescriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{2}
}

type CompressionType int32

const (
	CompressionType_CompressionNone CompressionType = 0
	CompressionType_CompressionZlib CompressionType = 1
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "CompressionNone",
		1: "CompressionZlib",
	}
	CompressionType_value = map[string]int32{
		"CompressionNone": 0,
		"CompressionZlib": 1,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_jscp_protocol_proto_enumTypes[3].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_jscp_protocol_proto_enumTypes[3]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{3}
}

type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType KeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=kr.jclab.jscp.payload.KeyType" json:"key_type,omitempty"`
	Data    []byte  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *PublicKey) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_KeyTypeUnknown
}

func (x *PublicKey) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PrivateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType KeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=kr.jclab.jscp.payload.KeyType" json:"key_type,omitempty"`
	Data    []byte  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PrivateKey) Reset() {
	*x = PrivateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKey) ProtoMessage() {}

func (x *PrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKey.ProtoReflect.Descriptor instead.
func (*PrivateKey) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *PrivateKey) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_KeyTypeUnknown
}

func (x *PrivateKey) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ClientHelloSigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EphemeralKey *PublicKey `protobuf:"bytes,1,opt,name=ephemeral_key,json=ephemeralKey,proto3" json:"ephemeral_key,omitempty"`
	Additional   []byte     `protobuf:"bytes,3,opt,name=additional,proto3" json:"additional,omitempty"`
}

func (x *ClientHelloSigned) Reset() {
	*x = ClientHelloSigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientHelloSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHelloSigned) ProtoMessage() {}

func (x *ClientHelloSigned) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHelloSigned.ProtoReflect.Descriptor instead.
func (*ClientHelloSigned) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *ClientHelloSigned) GetEphemeralKey() *PublicKey {
	if x != nil {
		return x.EphemeralKey
	}
	return nil
}

func (x *ClientHelloSigned) GetAdditional() []byte {
	if x != nil {
		return x.Additional
	}
	return nil
}

type ClientHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    int32      `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Signed     []byte     `protobuf:"bytes,2,opt,name=signed,proto3" json:"signed,omitempty"` // ClientHelloSigned
	Additional []byte     `protobuf:"bytes,3,opt,name=additional,proto3" json:"additional,omitempty"`
	StaticKey  *PublicKey `protobuf:"bytes,4,opt,name=static_key,json=staticKey,proto3" json:"static_key,omitempty"`
	Signature  []byte     `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ClientHello) Reset() {
	*x = ClientHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHello) ProtoMessage() {}

func (x *ClientHello) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHello.ProtoReflect.Descriptor instead.
func (*ClientHello) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *ClientHello) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ClientHello) GetSigned() []byte {
	if x != nil {
		return x.Signed
	}
	return nil
}

func (x *ClientHello) GetAdditional() []byte {
	if x != nil {
		return x.Additional
	}
	return nil
}

func (x *ClientHello) GetStaticKey() *PublicKey {
	if x != nil {
		return x.StaticKey
	}
	return nil
}

func (x *ClientHello) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type UnencryptedServerHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signed    []byte `protobuf:"bytes,2,opt,name=signed,proto3" json:"signed,omitempty"` // ServerHelloSigned
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *UnencryptedServerHello) Reset() {
	*x = UnencryptedServerHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnencryptedServerHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnencryptedServerHello) ProtoMessage() {}

func (x *UnencryptedServerHello) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnencryptedServerHello.ProtoReflect.Descriptor instead.
func (*UnencryptedServerHello) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *UnencryptedServerHello) GetSigned() []byte {
	if x != nil {
		return x.Signed
	}
	return nil
}

func (x *UnencryptedServerHello) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ServerHelloSigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EphemeralKey    *PublicKey      `protobuf:"bytes,1,opt,name=ephemeral_key,json=ephemeralKey,proto3" json:"ephemeral_key,omitempty"`
	Additional      []byte          `protobuf:"bytes,2,opt,name=additional,proto3" json:"additional,omitempty"`
	CryptoAlgorithm CryptoAlgorithm `protobuf:"varint,3,opt,name=crypto_algorithm,json=cryptoAlgorithm,proto3,enum=kr.jclab.jscp.payload.CryptoAlgorithm" json:"crypto_algorithm,omitempty"`
}

func (x *ServerHelloSigned) Reset() {
	*x = ServerHelloSigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerHelloSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerHelloSigned) ProtoMessage() {}

func (x *ServerHelloSigned) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerHelloSigned.ProtoReflect.Descriptor instead.
func (*ServerHelloSigned) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *ServerHelloSigned) GetEphemeralKey() *PublicKey {
	if x != nil {
		return x.EphemeralKey
	}
	return nil
}

func (x *ServerHelloSigned) GetAdditional() []byte {
	if x != nil {
		return x.Additional
	}
	return nil
}

func (x *ServerHelloSigned) GetCryptoAlgorithm() CryptoAlgorithm {
	if x != nil {
		return x.CryptoAlgorithm
	}
	return CryptoAlgorithm_CryptoAlgorithmUnknown
}

type EncryptedServerHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificate []byte `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"` // x509 der
	Additional  []byte `protobuf:"bytes,2,opt,name=additional,proto3" json:"additional,omitempty"`
}

func (x *EncryptedServerHello) Reset() {
	*x = EncryptedServerHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedServerHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedServerHello) ProtoMessage() {}

func (x *EncryptedServerHello) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedServerHello.ProtoReflect.Descriptor instead.
func (*EncryptedServerHello) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *EncryptedServerHello) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *EncryptedServerHello) GetAdditional() []byte {
	if x != nil {
		return x.Additional
	}
	return nil
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    AlertCode `protobuf:"varint,1,opt,name=code,proto3,enum=kr.jclab.jscp.payload.AlertCode" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *Alert) GetCode() AlertCode {
	if x != nil {
		return x.Code
	}
	return AlertCode_AlertClose
}

func (x *Alert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CompressionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type CompressionType `protobuf:"varint,1,opt,name=type,proto3,enum=kr.jclab.jscp.payload.CompressionType" json:"type,omitempty"`
}

func (x *CompressionInfo) Reset() {
	*x = CompressionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressionInfo) ProtoMessage() {}

func (x *CompressionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressionInfo.ProtoReflect.Descriptor instead.
func (*CompressionInfo) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{8}
}

func (x *CompressionInfo) GetType() CompressionType {
	if x != nil {
		return x.Type
	}
	return CompressionType_CompressionNone
}

// CryptoAlgorithm-GCM
type EncryptedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// BEGIN AUTH DATA
	// Sequence Number 64-bit BE
	CompressionInfo []byte `protobuf:"bytes,3,opt,name=compression_info,json=compressionInfo,proto3" json:"compression_info,omitempty"` // CompressionInfo
	// END AUTH DATA
	Ciphertext []byte `protobuf:"bytes,10,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Mac        []byte `protobuf:"bytes,11,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *EncryptedMessage) Reset() {
	*x = EncryptedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedMessage) ProtoMessage() {}

func (x *EncryptedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedMessage.ProtoReflect.Descriptor instead.
func (*EncryptedMessage) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *EncryptedMessage) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *EncryptedMessage) GetCompressionInfo() []byte {
	if x != nil {
		return x.CompressionInfo
	}
	return nil
}

func (x *EncryptedMessage) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *EncryptedMessage) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*Payload_ClientHello
	//	*Payload_UnencryptedServerHello
	//	*Payload_UnencryptedAlert
	Message          isPayload_Message `protobuf_oneof:"message"`
	EncryptedMessage *EncryptedMessage `protobuf:"bytes,20,opt,name=encrypted_message,json=encryptedMessage,proto3" json:"encrypted_message,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{10}
}

func (m *Payload) GetMessage() isPayload_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Payload) GetClientHello() []byte {
	if x, ok := x.GetMessage().(*Payload_ClientHello); ok {
		return x.ClientHello
	}
	return nil
}

func (x *Payload) GetUnencryptedServerHello() []byte {
	if x, ok := x.GetMessage().(*Payload_UnencryptedServerHello); ok {
		return x.UnencryptedServerHello
	}
	return nil
}

func (x *Payload) GetUnencryptedAlert() *Alert {
	if x, ok := x.GetMessage().(*Payload_UnencryptedAlert); ok {
		return x.UnencryptedAlert
	}
	return nil
}

func (x *Payload) GetEncryptedMessage() *EncryptedMessage {
	if x != nil {
		return x.EncryptedMessage
	}
	return nil
}

type isPayload_Message interface {
	isPayload_Message()
}

type Payload_ClientHello struct {
	ClientHello []byte `protobuf:"bytes,10,opt,name=client_hello,json=clientHello,proto3,oneof"` // ClientHello
}

type Payload_UnencryptedServerHello struct {
	UnencryptedServerHello []byte `protobuf:"bytes,11,opt,name=unencrypted_server_hello,json=unencryptedServerHello,proto3,oneof"` // UnencryptedServerHello
}

type Payload_UnencryptedAlert struct {
	UnencryptedAlert *Alert `protobuf:"bytes,12,opt,name=unencrypted_alert,json=unencryptedAlert,proto3,oneof"` // Alert
}

func (*Payload_ClientHello) isPayload_Message() {}

func (*Payload_UnencryptedServerHello) isPayload_Message() {}

func (*Payload_UnencryptedAlert) isPayload_Message() {}

var File_jscp_protocol_proto protoreflect.FileDescriptor

var file_jscp_protocol_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6a, 0x73, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e,
	0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5a, 0x0a, 0x09,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6b, 0x72,
	0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63,
	0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x65, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63,
	0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x52, 0x0c, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4b, 0x65,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x22, 0xbe, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c,
	0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x65, 0x70, 0x68, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x0c, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x51, 0x0a, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6b, 0x72, 0x2e, 0x6a,
	0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x52, 0x0f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x22, 0x58, 0x0a, 0x14, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x57, 0x0a, 0x05,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a,
	0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61,
	0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x22, 0x98, 0x02, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x3a, 0x0a,
	0x18, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x16, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x4b, 0x0a, 0x11, 0x75, 0x6e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e,
	0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x10, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x54, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63,
	0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0xaa, 0x01, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x48, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x48, 0x58, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x48, 0x45, 0x6e, 0x64,
	0x10, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x66, 0x12, 0x18, 0x0a, 0x13, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e,
	0x64, 0x10, 0xc8, 0x01, 0x2a, 0x45, 0x0a, 0x0f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x41, 0x65, 0x73, 0x10, 0x01, 0x2a, 0x47, 0x0a, 0x09, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x10, 0x0a, 0x2a, 0x3b, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5a, 0x6c, 0x69, 0x62, 0x10,
	0x01, 0x42, 0x4b, 0x0a, 0x15, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73,
	0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0b, 0x4a, 0x63, 0x73, 0x70,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x01, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x63, 0x2d, 0x6c, 0x61, 0x62, 0x2f, 0x6a, 0x63, 0x73,
	0x70, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jscp_protocol_proto_rawDescOnce sync.Once
	file_jscp_protocol_proto_rawDescData = file_jscp_protocol_proto_rawDesc
)

func file_jscp_protocol_proto_rawDescGZIP() []byte {
	file_jscp_protocol_proto_rawDescOnce.Do(func() {
		file_jscp_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_jscp_protocol_proto_rawDescData)
	})
	return file_jscp_protocol_proto_rawDescData
}

var file_jscp_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_jscp_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_jscp_protocol_proto_goTypes = []interface{}{
	(KeyType)(0),                   // 0: kr.jclab.jscp.payload.KeyType
	(CryptoAlgorithm)(0),           // 1: kr.jclab.jscp.payload.CryptoAlgorithm
	(AlertCode)(0),                 // 2: kr.jclab.jscp.payload.AlertCode
	(CompressionType)(0),           // 3: kr.jclab.jscp.payload.CompressionType
	(*PublicKey)(nil),              // 4: kr.jclab.jscp.payload.PublicKey
	(*PrivateKey)(nil),             // 5: kr.jclab.jscp.payload.PrivateKey
	(*ClientHelloSigned)(nil),      // 6: kr.jclab.jscp.payload.ClientHelloSigned
	(*ClientHello)(nil),            // 7: kr.jclab.jscp.payload.ClientHello
	(*UnencryptedServerHello)(nil), // 8: kr.jclab.jscp.payload.UnencryptedServerHello
	(*ServerHelloSigned)(nil),      // 9: kr.jclab.jscp.payload.ServerHelloSigned
	(*EncryptedServerHello)(nil),   // 10: kr.jclab.jscp.payload.EncryptedServerHello
	(*Alert)(nil),                  // 11: kr.jclab.jscp.payload.Alert
	(*CompressionInfo)(nil),        // 12: kr.jclab.jscp.payload.CompressionInfo
	(*EncryptedMessage)(nil),       // 13: kr.jclab.jscp.payload.EncryptedMessage
	(*Payload)(nil),                // 14: kr.jclab.jscp.payload.Payload
}
var file_jscp_protocol_proto_depIdxs = []int32{
	0,  // 0: kr.jclab.jscp.payload.PublicKey.key_type:type_name -> kr.jclab.jscp.payload.KeyType
	0,  // 1: kr.jclab.jscp.payload.PrivateKey.key_type:type_name -> kr.jclab.jscp.payload.KeyType
	4,  // 2: kr.jclab.jscp.payload.ClientHelloSigned.ephemeral_key:type_name -> kr.jclab.jscp.payload.PublicKey
	4,  // 3: kr.jclab.jscp.payload.ClientHello.static_key:type_name -> kr.jclab.jscp.payload.PublicKey
	4,  // 4: kr.jclab.jscp.payload.ServerHelloSigned.ephemeral_key:type_name -> kr.jclab.jscp.payload.PublicKey
	1,  // 5: kr.jclab.jscp.payload.ServerHelloSigned.crypto_algorithm:type_name -> kr.jclab.jscp.payload.CryptoAlgorithm
	2,  // 6: kr.jclab.jscp.payload.Alert.code:type_name -> kr.jclab.jscp.payload.AlertCode
	3,  // 7: kr.jclab.jscp.payload.CompressionInfo.type:type_name -> kr.jclab.jscp.payload.CompressionType
	11, // 8: kr.jclab.jscp.payload.Payload.unencrypted_alert:type_name -> kr.jclab.jscp.payload.Alert
	13, // 9: kr.jclab.jscp.payload.Payload.encrypted_message:type_name -> kr.jclab.jscp.payload.EncryptedMessage
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_jscp_protocol_proto_init() }
func file_jscp_protocol_proto_init() {
	if File_jscp_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jscp_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientHelloSigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnencryptedServerHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerHelloSigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedServerHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jscp_protocol_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Payload_ClientHello)(nil),
		(*Payload_UnencryptedServerHello)(nil),
		(*Payload_UnencryptedAlert)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jscp_protocol_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jscp_protocol_proto_goTypes,
		DependencyIndexes: file_jscp_protocol_proto_depIdxs,
		EnumInfos:         file_jscp_protocol_proto_enumTypes,
		MessageInfos:      file_jscp_protocol_proto_msgTypes,
	}.Build()
	File_jscp_protocol_proto = out.File
	file_jscp_protocol_proto_rawDesc = nil
	file_jscp_protocol_proto_goTypes = nil
	file_jscp_protocol_proto_depIdxs = nil
}

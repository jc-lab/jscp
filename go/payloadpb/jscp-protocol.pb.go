// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.28.2
// source: jscp-protocol.proto

package payloadpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AEAD Cipher Algorithm
type CipherAlgorithm int32

const (
	CipherAlgorithm_CipherUnknown CipherAlgorithm = 0
	CipherAlgorithm_CipherAesGcm  CipherAlgorithm = 1
)

// Enum value maps for CipherAlgorithm.
var (
	CipherAlgorithm_name = map[int32]string{
		0: "CipherUnknown",
		1: "CipherAesGcm",
	}
	CipherAlgorithm_value = map[string]int32{
		"CipherUnknown": 0,
		"CipherAesGcm":  1,
	}
)

func (x CipherAlgorithm) Enum() *CipherAlgorithm {
	p := new(CipherAlgorithm)
	*p = x
	return p
}

func (x CipherAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CipherAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_jscp_protocol_proto_enumTypes[0].Descriptor()
}

func (CipherAlgorithm) Type() protoreflect.EnumType {
	return &file_jscp_protocol_proto_enumTypes[0]
}

func (x CipherAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CipherAlgorithm.Descriptor instead.
func (CipherAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{0}
}

type KeyFormat int32

const (
	KeyFormat_KeyFormatUnknown              KeyFormat = 0 // or Specific
	KeyFormat_KeyFormatX509Certificate      KeyFormat = 1
	KeyFormat_KeyFormatSubjectPublicKeyInfo KeyFormat = 2
	KeyFormat_KeyFormatEd25519              KeyFormat = 101
	KeyFormat_KeyFormatX25519               KeyFormat = 201
)

// Enum value maps for KeyFormat.
var (
	KeyFormat_name = map[int32]string{
		0:   "KeyFormatUnknown",
		1:   "KeyFormatX509Certificate",
		2:   "KeyFormatSubjectPublicKeyInfo",
		101: "KeyFormatEd25519",
		201: "KeyFormatX25519",
	}
	KeyFormat_value = map[string]int32{
		"KeyFormatUnknown":              0,
		"KeyFormatX509Certificate":      1,
		"KeyFormatSubjectPublicKeyInfo": 2,
		"KeyFormatEd25519":              101,
		"KeyFormatX25519":               201,
	}
)

func (x KeyFormat) Enum() *KeyFormat {
	p := new(KeyFormat)
	*p = x
	return p
}

func (x KeyFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_jscp_protocol_proto_enumTypes[1].Descriptor()
}

func (KeyFormat) Type() protoreflect.EnumType {
	return &file_jscp_protocol_proto_enumTypes[1]
}

func (x KeyFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyFormat.Descriptor instead.
func (KeyFormat) EnumDescriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{1}
}

type DHAlgorithm int32

const (
	DHAlgorithm_DHUnknown DHAlgorithm = 0
	DHAlgorithm_DHECC     DHAlgorithm = 1
	DHAlgorithm_DHX25519  DHAlgorithm = 2
)

// Enum value maps for DHAlgorithm.
var (
	DHAlgorithm_name = map[int32]string{
		0: "DHUnknown",
		1: "DHECC",
		2: "DHX25519",
	}
	DHAlgorithm_value = map[string]int32{
		"DHUnknown": 0,
		"DHECC":     1,
		"DHX25519":  2,
	}
)

func (x DHAlgorithm) Enum() *DHAlgorithm {
	p := new(DHAlgorithm)
	*p = x
	return p
}

func (x DHAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_jscp_protocol_proto_enumTypes[2].Descriptor()
}

func (DHAlgorithm) Type() protoreflect.EnumType {
	return &file_jscp_protocol_proto_enumTypes[2]
}

func (x DHAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHAlgorithm.Descriptor instead.
func (DHAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{2}
}

type PayloadType int32

const (
	PayloadType_PayloadUnknown PayloadType = 0
	PayloadType_PayloadHello   PayloadType = 1
	// Requests a different algorithm to be used. SymmetricState must be reset.
	PayloadType_PayloadHelloWithChangeAlgorithm PayloadType = 2
	PayloadType_PayloadEncryptedMessage         PayloadType = 10
)

// Enum value maps for PayloadType.
var (
	PayloadType_name = map[int32]string{
		0:  "PayloadUnknown",
		1:  "PayloadHello",
		2:  "PayloadHelloWithChangeAlgorithm",
		10: "PayloadEncryptedMessage",
	}
	PayloadType_value = map[string]int32{
		"PayloadUnknown":                  0,
		"PayloadHello":                    1,
		"PayloadHelloWithChangeAlgorithm": 2,
		"PayloadEncryptedMessage":         10,
	}
)

func (x PayloadType) Enum() *PayloadType {
	p := new(PayloadType)
	*p = x
	return p
}

func (x PayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_jscp_protocol_proto_enumTypes[3].Descriptor()
}

func (PayloadType) Type() protoreflect.EnumType {
	return &file_jscp_protocol_proto_enumTypes[3]
}

func (x PayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayloadType.Descriptor instead.
func (PayloadType) EnumDescriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{3}
}

type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format KeyFormat `protobuf:"varint,1,opt,name=format,proto3,enum=kr.jclab.jscp.payload.KeyFormat" json:"format,omitempty"`
	Data   []byte    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *PublicKey) GetFormat() KeyFormat {
	if x != nil {
		return x.Format
	}
	return KeyFormat_KeyFormatUnknown
}

func (x *PublicKey) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DHPublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm DHAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=kr.jclab.jscp.payload.DHAlgorithm" json:"algorithm,omitempty"`
	Data      []byte      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DHPublicKey) Reset() {
	*x = DHPublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHPublicKey) ProtoMessage() {}

func (x *DHPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHPublicKey.ProtoReflect.Descriptor instead.
func (*DHPublicKey) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *DHPublicKey) GetAlgorithm() DHAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return DHAlgorithm_DHUnknown
}

func (x *DHPublicKey) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadType PayloadType `protobuf:"varint,1,opt,name=payload_type,json=payloadType,proto3,enum=kr.jclab.jscp.payload.PayloadType" json:"payload_type,omitempty"`
	Data        []byte      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *Payload) GetPayloadType() PayloadType {
	if x != nil {
		return x.PayloadType
	}
	return PayloadType_PayloadUnknown
}

func (x *Payload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type HelloSigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportDh       []DHAlgorithm     `protobuf:"varint,1,rep,packed,name=support_dh,json=supportDh,proto3,enum=kr.jclab.jscp.payload.DHAlgorithm" json:"support_dh,omitempty"`                 // Support DH Algorithms
	SupportCipher   []CipherAlgorithm `protobuf:"varint,2,rep,packed,name=support_cipher,json=supportCipher,proto3,enum=kr.jclab.jscp.payload.CipherAlgorithm" json:"support_cipher,omitempty"` // Support Cipher Algorithms
	CipherAlgorithm CipherAlgorithm   `protobuf:"varint,3,opt,name=cipher_algorithm,json=cipherAlgorithm,proto3,enum=kr.jclab.jscp.payload.CipherAlgorithm" json:"cipher_algorithm,omitempty"`
	PublicKey       *PublicKey        `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`                        // hello_02: (SignatureKey) MixHash or (DH Key) MixHash or MixKey (ECDH(s, re))
	DhAlsoPublicKey bool              `protobuf:"varint,5,opt,name=dh_also_public_key,json=dhAlsoPublicKey,proto3" json:"dh_also_public_key,omitempty"` // hello_03: MixHash or MixKey(public_key, ephemeral_key) (se, es)
	EphemeralKey    *DHPublicKey      `protobuf:"bytes,6,opt,name=ephemeral_key,json=ephemeralKey,proto3" json:"ephemeral_key,omitempty"`               // hello_04: MixHash or MixKey
	Additional      []byte            `protobuf:"bytes,7,opt,name=additional,proto3" json:"additional,omitempty"`                                       // hello_05: EncryptAndMixHash
}

func (x *HelloSigned) Reset() {
	*x = HelloSigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloSigned) ProtoMessage() {}

func (x *HelloSigned) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloSigned.ProtoReflect.Descriptor instead.
func (*HelloSigned) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *HelloSigned) GetSupportDh() []DHAlgorithm {
	if x != nil {
		return x.SupportDh
	}
	return nil
}

func (x *HelloSigned) GetSupportCipher() []CipherAlgorithm {
	if x != nil {
		return x.SupportCipher
	}
	return nil
}

func (x *HelloSigned) GetCipherAlgorithm() CipherAlgorithm {
	if x != nil {
		return x.CipherAlgorithm
	}
	return CipherAlgorithm_CipherUnknown
}

func (x *HelloSigned) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *HelloSigned) GetDhAlsoPublicKey() bool {
	if x != nil {
		return x.DhAlsoPublicKey
	}
	return false
}

func (x *HelloSigned) GetEphemeralKey() *DHPublicKey {
	if x != nil {
		return x.EphemeralKey
	}
	return nil
}

func (x *HelloSigned) GetAdditional() []byte {
	if x != nil {
		return x.Additional
	}
	return nil
}

type HelloSignedBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportDh       []DHAlgorithm     `protobuf:"varint,1,rep,packed,name=support_dh,json=supportDh,proto3,enum=kr.jclab.jscp.payload.DHAlgorithm" json:"support_dh,omitempty"`
	SupportCipher   []CipherAlgorithm `protobuf:"varint,2,rep,packed,name=support_cipher,json=supportCipher,proto3,enum=kr.jclab.jscp.payload.CipherAlgorithm" json:"support_cipher,omitempty"`
	CipherAlgorithm CipherAlgorithm   `protobuf:"varint,3,opt,name=cipher_algorithm,json=cipherAlgorithm,proto3,enum=kr.jclab.jscp.payload.CipherAlgorithm" json:"cipher_algorithm,omitempty"`
	PublicKey       []byte            `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	DhAlsoPublicKey bool              `protobuf:"varint,5,opt,name=dh_also_public_key,json=dhAlsoPublicKey,proto3" json:"dh_also_public_key,omitempty"`
	EphemeralKey    []byte            `protobuf:"bytes,6,opt,name=ephemeral_key,json=ephemeralKey,proto3" json:"ephemeral_key,omitempty"` // DHPublicKey
	Additional      []byte            `protobuf:"bytes,7,opt,name=additional,proto3" json:"additional,omitempty"`
}

func (x *HelloSignedBytes) Reset() {
	*x = HelloSignedBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloSignedBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloSignedBytes) ProtoMessage() {}

func (x *HelloSignedBytes) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloSignedBytes.ProtoReflect.Descriptor instead.
func (*HelloSignedBytes) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *HelloSignedBytes) GetSupportDh() []DHAlgorithm {
	if x != nil {
		return x.SupportDh
	}
	return nil
}

func (x *HelloSignedBytes) GetSupportCipher() []CipherAlgorithm {
	if x != nil {
		return x.SupportCipher
	}
	return nil
}

func (x *HelloSignedBytes) GetCipherAlgorithm() CipherAlgorithm {
	if x != nil {
		return x.CipherAlgorithm
	}
	return CipherAlgorithm_CipherUnknown
}

func (x *HelloSignedBytes) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *HelloSignedBytes) GetDhAlsoPublicKey() bool {
	if x != nil {
		return x.DhAlsoPublicKey
	}
	return false
}

func (x *HelloSignedBytes) GetEphemeralKey() []byte {
	if x != nil {
		return x.EphemeralKey
	}
	return nil
}

func (x *HelloSignedBytes) GetAdditional() []byte {
	if x != nil {
		return x.Additional
	}
	return nil
}

type Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   int32        `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`    // hello_01: MixHash(version as little-endian)
	Signed    *HelloSigned `protobuf:"bytes,2,opt,name=signed,proto3" json:"signed,omitempty"`       // marshaled HelloSigned
	Signature []byte       `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"` // optional signature. signed by Sender's static key
}

func (x *Hello) Reset() {
	*x = Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hello) ProtoMessage() {}

func (x *Hello) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hello.ProtoReflect.Descriptor instead.
func (*Hello) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *Hello) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Hello) GetSigned() *HelloSigned {
	if x != nil {
		return x.Signed
	}
	return nil
}

func (x *Hello) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type HelloBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Signed    []byte `protobuf:"bytes,2,opt,name=signed,proto3" json:"signed,omitempty"`       // marshaled HelloSigned
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"` // hello_05: MixHash
}

func (x *HelloBytes) Reset() {
	*x = HelloBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloBytes) ProtoMessage() {}

func (x *HelloBytes) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloBytes.ProtoReflect.Descriptor instead.
func (*HelloBytes) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *HelloBytes) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *HelloBytes) GetSigned() []byte {
	if x != nil {
		return x.Signed
	}
	return nil
}

func (x *HelloBytes) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type EncryptedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EncryptedMessage) Reset() {
	*x = EncryptedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jscp_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedMessage) ProtoMessage() {}

func (x *EncryptedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_jscp_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedMessage.ProtoReflect.Descriptor instead.
func (*EncryptedMessage) Descriptor() ([]byte, []int) {
	return file_jscp_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *EncryptedMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_jscp_protocol_proto protoreflect.FileDescriptor

var file_jscp_protocol_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6a, 0x73, 0x63, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e,
	0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x59, 0x0a, 0x09,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6b, 0x72, 0x2e, 0x6a,
	0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x0b, 0x44, 0x48, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6b, 0x72, 0x2e, 0x6a,
	0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x44, 0x48, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64, 0x0a, 0x07,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xc9, 0x03, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x68,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61,
	0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44,
	0x48, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x68, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x72,
	0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x68, 0x5f, 0x61,
	0x6c, 0x73, 0x6f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x68, 0x41, 0x6c, 0x73, 0x6f, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x0d, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b,
	0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x48, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x0c, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x88,
	0x03, 0x0a, 0x10, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c,
	0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x44, 0x48, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x68, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x68, 0x5f, 0x61, 0x6c,
	0x73, 0x6f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x68, 0x41, 0x6c, 0x73, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x7b, 0x0a, 0x05, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b,
	0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e, 0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x5c, 0x0a, 0x0a, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x36, 0x0a, 0x0f,
	0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x41, 0x65, 0x73, 0x47,
	0x63, 0x6d, 0x10, 0x01, 0x2a, 0x8e, 0x01, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4b, 0x65, 0x79, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x65, 0x79,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x65, 0x12,
	0x14, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x58, 0x32, 0x35, 0x35,
	0x31, 0x39, 0x10, 0xc9, 0x01, 0x2a, 0x35, 0x0a, 0x0b, 0x44, 0x48, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x48, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x48, 0x45, 0x43, 0x43, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x48, 0x58, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x02, 0x2a, 0x75, 0x0a, 0x0b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x10, 0x0a, 0x42, 0x4b, 0x0a, 0x15, 0x6b, 0x72, 0x2e, 0x6a, 0x63, 0x6c, 0x61, 0x62, 0x2e,
	0x6a, 0x73, 0x63, 0x70, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0b, 0x4a, 0x63,
	0x73, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x01, 0x5a, 0x23, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x63, 0x2d, 0x6c, 0x61, 0x62, 0x2f, 0x6a,
	0x63, 0x73, 0x70, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jscp_protocol_proto_rawDescOnce sync.Once
	file_jscp_protocol_proto_rawDescData = file_jscp_protocol_proto_rawDesc
)

func file_jscp_protocol_proto_rawDescGZIP() []byte {
	file_jscp_protocol_proto_rawDescOnce.Do(func() {
		file_jscp_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_jscp_protocol_proto_rawDescData)
	})
	return file_jscp_protocol_proto_rawDescData
}

var file_jscp_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_jscp_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_jscp_protocol_proto_goTypes = []interface{}{
	(CipherAlgorithm)(0),     // 0: kr.jclab.jscp.payload.CipherAlgorithm
	(KeyFormat)(0),           // 1: kr.jclab.jscp.payload.KeyFormat
	(DHAlgorithm)(0),         // 2: kr.jclab.jscp.payload.DHAlgorithm
	(PayloadType)(0),         // 3: kr.jclab.jscp.payload.PayloadType
	(*PublicKey)(nil),        // 4: kr.jclab.jscp.payload.PublicKey
	(*DHPublicKey)(nil),      // 5: kr.jclab.jscp.payload.DHPublicKey
	(*Payload)(nil),          // 6: kr.jclab.jscp.payload.Payload
	(*HelloSigned)(nil),      // 7: kr.jclab.jscp.payload.HelloSigned
	(*HelloSignedBytes)(nil), // 8: kr.jclab.jscp.payload.HelloSignedBytes
	(*Hello)(nil),            // 9: kr.jclab.jscp.payload.Hello
	(*HelloBytes)(nil),       // 10: kr.jclab.jscp.payload.HelloBytes
	(*EncryptedMessage)(nil), // 11: kr.jclab.jscp.payload.EncryptedMessage
}
var file_jscp_protocol_proto_depIdxs = []int32{
	1,  // 0: kr.jclab.jscp.payload.PublicKey.format:type_name -> kr.jclab.jscp.payload.KeyFormat
	2,  // 1: kr.jclab.jscp.payload.DHPublicKey.algorithm:type_name -> kr.jclab.jscp.payload.DHAlgorithm
	3,  // 2: kr.jclab.jscp.payload.Payload.payload_type:type_name -> kr.jclab.jscp.payload.PayloadType
	2,  // 3: kr.jclab.jscp.payload.HelloSigned.support_dh:type_name -> kr.jclab.jscp.payload.DHAlgorithm
	0,  // 4: kr.jclab.jscp.payload.HelloSigned.support_cipher:type_name -> kr.jclab.jscp.payload.CipherAlgorithm
	0,  // 5: kr.jclab.jscp.payload.HelloSigned.cipher_algorithm:type_name -> kr.jclab.jscp.payload.CipherAlgorithm
	4,  // 6: kr.jclab.jscp.payload.HelloSigned.public_key:type_name -> kr.jclab.jscp.payload.PublicKey
	5,  // 7: kr.jclab.jscp.payload.HelloSigned.ephemeral_key:type_name -> kr.jclab.jscp.payload.DHPublicKey
	2,  // 8: kr.jclab.jscp.payload.HelloSignedBytes.support_dh:type_name -> kr.jclab.jscp.payload.DHAlgorithm
	0,  // 9: kr.jclab.jscp.payload.HelloSignedBytes.support_cipher:type_name -> kr.jclab.jscp.payload.CipherAlgorithm
	0,  // 10: kr.jclab.jscp.payload.HelloSignedBytes.cipher_algorithm:type_name -> kr.jclab.jscp.payload.CipherAlgorithm
	7,  // 11: kr.jclab.jscp.payload.Hello.signed:type_name -> kr.jclab.jscp.payload.HelloSigned
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_jscp_protocol_proto_init() }
func file_jscp_protocol_proto_init() {
	if File_jscp_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_jscp_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHPublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloSigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloSignedBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jscp_protocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jscp_protocol_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_jscp_protocol_proto_goTypes,
		DependencyIndexes: file_jscp_protocol_proto_depIdxs,
		EnumInfos:         file_jscp_protocol_proto_enumTypes,
		MessageInfos:      file_jscp_protocol_proto_msgTypes,
	}.Build()
	File_jscp_protocol_proto = out.File
	file_jscp_protocol_proto_rawDesc = nil
	file_jscp_protocol_proto_goTypes = nil
	file_jscp_protocol_proto_depIdxs = nil
}
